{"ast":null,"code":"import { HttpClient, HttpHeaders, HttpRequest, HttpResponse, HttpParams } from '@angular/common/http';\nimport { catchError, filter, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var RequestMethod = /*#__PURE__*/(() => {\n  RequestMethod = RequestMethod || {};\n  RequestMethod[\"Get\"] = \"GET\";\n  RequestMethod[\"Head\"] = \"HEAD\";\n  RequestMethod[\"Post\"] = \"POST\";\n  RequestMethod[\"Put\"] = \"PUT\";\n  RequestMethod[\"Delete\"] = \"DELETE\";\n  RequestMethod[\"Options\"] = \"OPTIONS\";\n  RequestMethod[\"Patch\"] = \"PATCH\";\n  return RequestMethod;\n})();\nvar ApiService = /** @class */function () {\n  function ApiService(http) {\n    this.http = http;\n    this.headers = new HttpHeaders({\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    });\n  }\n  ApiService.prototype.get = function (path, args) {\n    var options = {\n      headers: this.headers\n    };\n    if (args) {\n      options['params'] = this.serialize(args);\n    }\n    return this.http.get(path, options).pipe(catchError(this.checkError.bind(this)));\n  };\n  ApiService.prototype.post = function (path, body, customHeaders) {\n    return this.request(path, body, RequestMethod.Post, customHeaders);\n  };\n  ApiService.prototype.put = function (path, body) {\n    return this.request(path, body, RequestMethod.Put);\n  };\n  ApiService.prototype.delete = function (path, body) {\n    return this.request(path, body, RequestMethod.Delete);\n  };\n  ApiService.prototype.request = function (path, body, method, custemHeaders) {\n    var _this = this;\n    if (method === void 0) {\n      method = RequestMethod.Post;\n    }\n    var req = new HttpRequest(method, path, body, {\n      headers: custemHeaders || this.headers\n    });\n    return this.http.request(req).pipe(filter(function (response) {\n      return response instanceof HttpResponse;\n    })).pipe(map(function (response) {\n      return response.body;\n    })).pipe(catchError(function (error) {\n      return _this.checkError(error);\n    }));\n  };\n  ApiService.prototype.checkError = function (error) {\n    throw error;\n  };\n  ApiService.prototype.serialize = function (obj) {\n    var params = new HttpParams();\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key) && !this.looseInvalid(obj[key])) {\n        params = params.set(key, obj[key]);\n      }\n    }\n    return params;\n  };\n  ApiService.prototype.looseInvalid = function (a) {\n    return a === '' || a === null || a === undefined;\n  };\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n}();\nexport { ApiService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}