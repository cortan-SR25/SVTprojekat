{"ast":null,"code":"import { HttpClient, HttpHeaders, HttpRequest, HttpResponse, HttpParams } from '@angular/common/http';\nimport { catchError, filter, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var RequestMethod = /*#__PURE__*/(() => {\n  RequestMethod = RequestMethod || {};\n  RequestMethod[\"Get\"] = \"GET\";\n  RequestMethod[\"Head\"] = \"HEAD\";\n  RequestMethod[\"Post\"] = \"POST\";\n  RequestMethod[\"Put\"] = \"PUT\";\n  RequestMethod[\"Delete\"] = \"DELETE\";\n  RequestMethod[\"Options\"] = \"OPTIONS\";\n  RequestMethod[\"Patch\"] = \"PATCH\";\n  return RequestMethod;\n})();\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.headers = new HttpHeaders({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      });\n    }\n    get(path, args) {\n      const options = {\n        headers: this.headers\n      };\n      if (args) {\n        options['params'] = this.serialize(args);\n      }\n      return this.http.get(path, options).pipe(catchError(this.checkError.bind(this)));\n    }\n    post(path, body, customHeaders) {\n      return this.request(path, body, RequestMethod.Post, customHeaders);\n    }\n    put(path, body) {\n      return this.request(path, body, RequestMethod.Put);\n    }\n    delete(path, body) {\n      return this.request(path, body, RequestMethod.Delete);\n    }\n    request(path, body, method = RequestMethod.Post, custemHeaders) {\n      const req = new HttpRequest(method, path, body, {\n        headers: custemHeaders || this.headers\n      });\n      return this.http.request(req).pipe(filter(response => response instanceof HttpResponse)).pipe(map(response => response.body)).pipe(catchError(error => this.checkError(error)));\n    }\n    checkError(error) {\n      throw error;\n    }\n    serialize(obj) {\n      let params = new HttpParams();\n      for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !this.looseInvalid(obj[key])) {\n          params = params.set(key, obj[key]);\n        }\n      }\n      return params;\n    }\n    looseInvalid(a) {\n      return a === '' || a === null || a === undefined;\n    }\n  }\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}