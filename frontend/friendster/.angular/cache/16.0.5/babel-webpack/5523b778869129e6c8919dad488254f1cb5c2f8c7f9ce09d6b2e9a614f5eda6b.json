{"ast":null,"code":"import { ApiService } from './api.service';\nimport { ConfigService } from './config.service';\nimport { map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"./config.service\";\nexport let GroupService = /*#__PURE__*/(() => {\n  class GroupService {\n    constructor(apiService, config) {\n      this.apiService = apiService;\n      this.config = config;\n    }\n    getGroups() {\n      return this.apiService.get(this.config.all_groups_url);\n    }\n    getActiveGroups() {\n      return this.apiService.get(this.config.all_active_groups_url);\n    }\n    getGroup(id) {\n      return this.apiService.get(this.config.group_url + id);\n    }\n    delete(group) {\n      var groupDTO = {\n        \"id\": group.id,\n        \"name\": group.name,\n        \"description\": group.description,\n        \"adminId\": group.groupAdmin.id\n      };\n      const postHeaders = new HttpHeaders({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      });\n      return this.apiService.post(this.config.delete_group_url, JSON.stringify(groupDTO), postHeaders).pipe(map(() => {}));\n    }\n    create(group) {\n      var groupDTO = {\n        \"name\": group.name,\n        \"description\": group.description,\n        \"adminId\": group.groupAdmin.id\n      };\n      const postHeaders = new HttpHeaders({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      });\n      return this.apiService.post(this.config.create_group_url, JSON.stringify(groupDTO), postHeaders).pipe(map(() => {}));\n    }\n    edit(group) {\n      var groupDTO = {\n        \"id\": group.id,\n        \"name\": group.name,\n        \"description\": group.description,\n        \"adminId\": group.groupAdmin.id\n      };\n      const postHeaders = new HttpHeaders({\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      });\n      return this.apiService.post(this.config.edit_group_url, JSON.stringify(groupDTO), postHeaders).pipe(map(() => {}));\n    }\n  }\n  GroupService.ɵfac = function GroupService_Factory(t) {\n    return new (t || GroupService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.ConfigService));\n  };\n  GroupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GroupService,\n    factory: GroupService.ɵfac,\n    providedIn: 'root'\n  });\n  return GroupService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}